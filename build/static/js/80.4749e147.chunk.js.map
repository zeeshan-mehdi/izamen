{"version":3,"sources":["components/Dashboard/AgentArea/Dashboard.js"],"names":["curveCardinal","tension","compose","withStyles","theme","root","flexGrow","color","root1","minWidth","internal","backGroundColor","bullet","display","margin","transform","title","fontSize","pos","marginBottom","props","classes","useState","propertypurposecount","Setpropertypurposecount","Setpropertypurposemonthlycount","totalpropertycount","Settotalpropertycount","useEffect","a","uid","localStorage","getItem","axios","post","globalvariables","data","Basicapi","user_ID","headers","res","console","log","j","forEach","element","count","alert","toString","fluid","md","span","offset","style","format","ticking","map","item","property_purpose","bg","Body","Title","textAlign","Text"],"mappings":"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","file":"static/js/80.4749e147.chunk.js","sourcesContent":["/** @format */\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n// import PieChart from \"../common/PieCharts\";\r\n// import CustomBarChart from \"../common/BarChart\";\r\nimport {\r\n    Paper\r\n} from \"@material-ui/core\";\r\nimport { Container, Row, Col, Tab, Tabs, Modal, Card, Button } from \"react-bootstrap\";\r\n\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\n// import { getOrdersDate } from \"../../redux/actions/orderActions\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Clock from 'react-live-clock';\r\n\r\n// import { getActiveUsers } from \"../../redux/actions/userActions\";\r\n// import { getTransactionDate } from \"../../redux/actions/transactionActions\";\r\n// import { getFeedBackCount } from \"../../redux/actions/feedbackActions\";\r\n// import { getProblemCount } from \"../../redux/actions/problemActions\";\r\n// import { getSolvedProblemCount } from \"../../redux/actions/solvedproblemActions\";\r\n// import { getTotalPeers, getTotalPatrons,getTotalSignups,getTotalSignupsM_F,getTotalSignupsAgeWise } from \"../../redux/actions/userDashboardActions\";\r\n// import Card from \"@material-ui/core/Card\";\r\n// import CardActions from \"@material-ui/core/CardActions\";\r\n// import CardContent from \"@material-ui/core/CardContent\";\r\n// import Loader from \"../common/Loader\";\r\n\r\nimport globalvariables from \"../../../globalvariables\";\r\nimport axios from 'axios';\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n    ComposedChart,\r\n    Line,\r\n    Area,\r\n    Bar,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    Legend,\r\n    ResponsiveContainer,\r\n    AreaChart\r\n} from 'recharts';\r\n\r\nimport { curveCardinal } from \"d3-shape\";\r\n\r\nconst Styles = (theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        color: \"rgba(0, 0, 0, 0.54)\",\r\n    },\r\n    root1: {\r\n        minWidth: 275,\r\n    },\r\n    internal: {\r\n        backGroundColor: \"#FFFFFF\",\r\n    },\r\n    bullet: {\r\n        display: \"inline-block\",\r\n        margin: \"0 2px\",\r\n        transform: \"scale(0.8)\",\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n});\r\nconst cardinal = curveCardinal.tension(0.2);\r\n\r\nfunction Dashboard(props) {\r\n    const { classes } = props;\r\n    const [propertypurposecount, Setpropertypurposecount] = useState([]);\r\n    const [propertypurposemonthlycount, Setpropertypurposemonthlycount] = useState({});\r\n    const [totalpropertycount, Settotalpropertycount] = useState(\"\");\r\n\r\n\r\n    useEffect(async () => {\r\n        try {\r\n            let uid = localStorage.getItem(\"user_ID\");\r\n            const res = await axios.post(globalvariables.data.Basicapi + \"getPropertyPurposeCountOnUserID\",\r\n                {\r\n                    user_ID: uid\r\n                },\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                });\r\n            console.log(\"res from getting propert on purpose counts\", res.data);\r\n\r\n            Setpropertypurposecount(res.data);\r\n            var j = 0;\r\n            if (res.data != null || res.data != []) {\r\n                res.data.forEach(element => {\r\n                    j = j + element.count;\r\n                });\r\n                Settotalpropertycount(j);\r\n            }\r\n            else {\r\n                Settotalpropertycount(0);\r\n            }\r\n\r\n\r\n\r\n        } catch (error) {\r\n            alert(\"From try catch of getting propert on purpose counts\", error.toString());\r\n\r\n            console.log(error);\r\n        }\r\n    }, []);\r\n    useEffect(async () => {\r\n        try {\r\n            let uid = localStorage.getItem(\"user_ID\");\r\n            const res = await axios.post(globalvariables.data.Basicapi + \"getPropertyPurposeCountMonthlyOnUserID\",\r\n                {\r\n                    user_ID: uid\r\n                },\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                });\r\n            console.log(\"res from getting propert on purpose monthly count\", res.data);\r\n\r\n            Setpropertypurposemonthlycount(res.data);\r\n\r\n\r\n\r\n        } catch (error) {\r\n            alert(\"From try catch of getting propert on purpose monthly counts\", error.toString());\r\n\r\n            // console.log(error);\r\n        }\r\n    }, []);\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Col md={{ span: 8, offset: 8 }}>\r\n                   <h3 style={{color:'#D5B357'}} > <Clock format={'h:mm:ssa'} ticking={true} /></h3>\r\n\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={6}><h1>Welcome {localStorage.getItem(\"username\")}</h1></Col>\r\n\r\n            </Row>\r\n            <Row>\r\n                <Col md={6}><h3>Dashboard</h3></Col>\r\n\r\n            </Row>\r\n\r\n\r\n            <Row style={{ marginBottom: '2.5%' }}>\r\n                {\r\n                    propertypurposecount.map((item) => {\r\n                        if (item.property_purpose == \"Sale\") {\r\n                            return <Col md={4}>\r\n                                <Card bg=\"info\" >\r\n                                    <Card.Body>\r\n                                        <Card.Title style={{ textAlign: \"center\" }}>Sale properties</Card.Title>\r\n                                        <Card.Text>\r\n                                            <h3 style={{ textAlign: \"center\" }}>{item.count}</h3>\r\n                                        </Card.Text>\r\n\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </Col>\r\n                        }\r\n                        if (item.property_purpose == \"Purchase\") {\r\n                            return <Col md={4}>\r\n                                <Card bg=\"info\" >\r\n                                    <Card.Body>\r\n                                        <Card.Title style={{ textAlign: \"center\" }}>Purchase properties</Card.Title>\r\n                                        <Card.Text>\r\n                                            <h3 style={{ textAlign: \"center\" }}>{item.count}</h3>\r\n                                        </Card.Text>\r\n\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </Col>\r\n                        }\r\n                        if (item.property_purpose == \"Rent\") {\r\n                            return <Col md={4}>\r\n                                <Card bg=\"info\" >\r\n                                    <Card.Body>\r\n                                        <Card.Title style={{ textAlign: \"center\" }}>Rent properties</Card.Title>\r\n                                        <Card.Text>\r\n                                            <h3 style={{ textAlign: \"center\" }}>{item.count}</h3>\r\n                                        </Card.Text>\r\n\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </Col>\r\n                        }\r\n                    })\r\n                }\r\n\r\n            </Row>\r\n            <Row style={{ marginBottom: '2.5%' }}>\r\n                <Col md={4}>\r\n                    <Card bg=\"success\" >\r\n                        <Card.Body>\r\n                            <Card.Title style={{ textAlign: \"center\" }}>Total Properties listed</Card.Title>\r\n                            <Card.Text>\r\n                                <h3 style={{ textAlign: \"center\" }}>{totalpropertycount}</h3>\r\n                            </Card.Text>\r\n\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n\r\n            {/* <Row style={{ padding: '2.5%' }}>\r\n                <Paper elevation={3} >\r\n                    <Col md={6}>\r\n                        <h5>Monthly Property Chart</h5>\r\n                        <ComposedChart\r\n                            width={500}\r\n                            height={400}\r\n                            data={propertypurposemonthlycount}\r\n                            margin={{\r\n                                top: 20,\r\n                                right: 20,\r\n                                bottom: 20,\r\n                                left: 20,\r\n                            }}\r\n                        >\r\n                            <CartesianGrid stroke=\"#f5f5f5\" />\r\n                            <XAxis dataKey=\"date\" scale=\"band\" />\r\n                            <YAxis />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Bar dataKey=\"count\" barSize={20} fill=\"#413ea0\" />\r\n                            <Line type=\"monotone\" dataKey=\"count\" stroke=\"#ff7300\" />\r\n                        </ComposedChart>\r\n\r\n\r\n                    </Col>\r\n                </Paper>\r\n               \r\n            </Row>\r\n */}\r\n\r\n\r\n\r\n\r\n        </Container>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default compose(\r\n    withStyles(Styles)\r\n)(Dashboard);\r\n"],"sourceRoot":""}